// scripts/debugContractState.ts
import { Address, toNano, beginCell } from '@ton/core';
import { Mixton } from '../wrappers/Mixton';
import { NetworkProvider } from '@ton/blueprint';

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–º—ã
function formatAmount(amount: bigint): string {
    return (Number(amount) / 1000000000).toFixed(9);
}

export async function run(provider: NetworkProvider) {
    const ui = provider.ui();

    const contractAddressFromEnv = process.env.CONTRACT_ADDRESS;
    if (!contractAddressFromEnv) {
        throw new Error('Contract address not found. Please set CONTRACT_ADDRESS in your .env file.');
    }
    const contractAddress = Address.parse(contractAddressFromEnv);
    const mixton = provider.open(Mixton.createFromAddress(contractAddress));

    ui.write(`üîç Debug Contract State for: ${mixton.address.toString()}\n`);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    const admin = await mixton.getAdmin();
    const basicStats = await mixton.getBasicStats();
    const queueInfo = await mixton.getQueueInfo();
    const queueDetails = await mixton.getQueueDetails();
    const lastDepositId = await mixton.getLastDepositId();
    const currentFeeRate = await mixton.getCurrentFeeRate();
    const signers = await mixton.getSigners();
    const performanceStats = await mixton.getPerformanceStats();

    ui.write(`üìä Basic Contract State:`);
    ui.write(`   Admin: ${admin.toString()}`);
    ui.write(`   Total Deposits: ${basicStats.totalDeposits}`);
    ui.write(`   Total Withdrawn: ${formatAmount(basicStats.totalWithdrawn)} TON`);
    ui.write(`   Current Fee Rate: ${currentFeeRate / 100}%`);
    ui.write(`   Signers: ${signers.count} (required: ${signers.required})`);
    ui.write(`   Last Deposit ID: #${lastDepositId}`);
    ui.write(`   Queue Length: ${queueInfo.queueLength}`);
    ui.write(`   Queue Amount: ${formatAmount(queueInfo.totalAmount)} TON`);
    ui.write(`   Queue Status: ${queueDetails.nextTime === -1 ? 'Empty' : 'Has items'}`);
    
    ui.write(`\n‚ö° Performance Stats:`);
    ui.write(`   Last Processed Time: ${performanceStats.lastProcessedTime === 0 ? 'Never' : new Date(performanceStats.lastProcessedTime * 1000).toISOString()}`);
    ui.write(`   Failed Transactions: ${performanceStats.failedTransactions}`);
    ui.write(`   Current Queue Size: ${performanceStats.queueSize}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã
    ui.write(`\nüí∞ Deposits Information:`);
    for (let i = 0; i <= lastDepositId && i < 10; i++) {
        const depositInfo = await mixton.getDepositInfo(BigInt(i));
        if (depositInfo && depositInfo.depositTime !== -1) {
            const status = depositInfo.status === 0 ? 'Pending' : depositInfo.status === 1 ? 'Processed' : 'Failed';
            ui.write(`   Deposit #${i}: ${status}, Time: ${new Date(depositInfo.depositTime * 1000).toISOString()}`);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const history = await mixton.getTransactionHistory();
    ui.write(`\nüìã Transaction History: ${history.length} records`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—á–µ—Ä–µ–¥–∏
    if (queueDetails.queueLength > 0) {
        ui.write(`\n‚è≥ Queue Details:`);
        ui.write(`   Next processing time: ${queueDetails.nextTime === -1 ? 'N/A' : new Date(queueDetails.nextTime * 1000).toISOString()}`);
        ui.write(`   Total amount in queue: ${formatAmount(queueDetails.totalAmount)} TON`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    const contractState = await provider.provider(contractAddress).getState();
    ui.write(`\nüíé Contract Balance: ${formatAmount(contractState.balance)} TON`);

    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ–ø–æ–∑–∏—Ç—ã –≤ —Å—Ç–∞—Ç—É—Å–µ Pending, –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π –≤—ã–≤–æ–¥
    if (lastDepositId >= 0) {
        const depositInfo = await mixton.getDepositInfo(BigInt(lastDepositId));
        if (depositInfo && depositInfo.depositTime !== -1 && depositInfo.status === 0) {
            ui.write(`\nüîÑ Testing simple withdrawal with deposit #${lastDepositId}...`);
            
            const recipient = Address.parse('0QDi6a6j5TUfF5dZcDvDZaYrG7YzxHAF7omZubrNJgJdxefE');
            const amount = toNano('0.1');
            const feeRate = 200;
            const delay = 30;

            try {
                // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–æ
                const recipientBefore = await provider.provider(recipient).getState();
                
                const result = await mixton.sendWithdraw(
                    provider.sender(),
                    recipient,
                    amount,
                    BigInt(lastDepositId),
                    feeRate,
                    delay,
                    toNano('0.05')
                );
                
                ui.write(`‚úÖ Simple withdrawal sent successfully!`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ
                const queueInfoAfter = await mixton.getQueueInfo();
                const depositInfoAfter = await mixton.getDepositInfo(BigInt(lastDepositId));
                
                ui.write(`\nüìä State After Simple Withdrawal:`);
                ui.write(`   Queue Length: ${queueInfoAfter.queueLength}`);
                if (depositInfoAfter && depositInfoAfter.depositTime !== -1) {
                    ui.write(`   Deposit Status: ${depositInfoAfter.status === 0 ? 'Pending' : depositInfoAfter.status === 1 ? 'Processed' : 'Failed'}`);
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ
                const recipientAfter = await provider.provider(recipient).getState();
                ui.write(`   Recipient Balance Change: ${formatAmount(recipientAfter.balance - recipientBefore.balance)} TON`);
                
            } catch (error) {
                ui.write(`‚ùå Error sending simple withdrawal: ${error instanceof Error ? error.message : String(error)}`);
            }
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏
    ui.write(`\n‚öôÔ∏è Testing queue processing...`);
    try {
        const processResult = await mixton.sendProcessQueue(provider.sender(), toNano('0.05'));
        ui.write(`‚úÖ Queue processing sent!`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        const queueInfoProcessed = await mixton.getQueueInfo();
        const basicStatsProcessed = await mixton.getBasicStats();
        
        ui.write(`\nüìä State After Processing:`);
        ui.write(`   Queue Length: ${queueInfoProcessed.queueLength}`);
        ui.write(`   Total Withdrawn: ${formatAmount(basicStatsProcessed.totalWithdrawn)} TON`);
        
    } catch (error) {
        ui.write(`‚ùå Error processing queue: ${error instanceof Error ? error.message : String(error)}`);
    }
}