// scripts/debugWithdrawStepByStep.ts
import { Mixton } from '../wrappers/Mixton';
import { toNano, beginCell, Address } from '@ton/core';
import { NetworkProvider } from '@ton/blueprint';

export async function run(provider: NetworkProvider) {
    const ui = provider.ui();

    const mixton = provider.open(
        Mixton.createFromAddress(
            Address.parse('EQDWwgurseY38CKqLIYt6ZbkOR8BAkkP4jmS6r6iB22rf3xK')
        )
    );

    ui.write(`üîç Deep Debug of Withdraw Function for: ${mixton.address.toString()}`);

    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ui.write(`\n=== –®–∞–≥ 1: –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ===`);
    
    try {
        const basicStats = await mixton.getBasicStats();
        ui.write(`Total Deposits: ${basicStats.totalDeposits}`);
        ui.write(`Total Withdrawn: ${basicStats.totalWithdrawn} TON`);
    } catch (error) {
        ui.write(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error instanceof Error ? error.message : String(error)}`);
    }

    try {
        const queueInfo = await mixton.getQueueInfo();
        ui.write(`Queue Length: ${queueInfo.queueLength}`);
        ui.write(`Queue Amount: ${queueInfo.totalAmount} TON`);
    } catch (error) {
        ui.write(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—á–µ—Ä–µ–¥–∏: ${error instanceof Error ? error.message : String(error)}`);
    }

    // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–ø–æ–∑–∏—Ç–µ
    ui.write(`\n=== –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ #5 ===`);
    
    try {
        const depositInfo = await mixton.getDepositInfo(5n);
        ui.write(`Deposit #5 Info:`);
        ui.write(`  Time: ${depositInfo.depositTime}`);
        ui.write(`  Delay: ${depositInfo.delay}`);
        ui.write(`  Status: ${depositInfo.status}`);
    } catch (error) {
        ui.write(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ–ø–æ–∑–∏—Ç–µ: ${error instanceof Error ? error.message : String(error)}`);
    }

    // –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤—ã–≤–æ–¥ (–Ω–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π)
    ui.write(`\n=== –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞ ===`);
    
    try {
        const recipient = Address.parse('EQDi6a6j5TUfF5dZcDvDZaYrG7YzxHAF7omZubrNJgJdxefE');
        const amount = toNano('0.3');
        const feeRate = 200; // 2%
        const delay = 30; // 30 —Å–µ–∫—É–Ω–¥
        
        ui.write(`–°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞:`);
        ui.write(`  Recipient: ${recipient.toString()}`);
        ui.write(`  Amount: ${amount} TON`);
        ui.write(`  Fee Rate: ${feeRate / 100}%`);
        ui.write(`  Delay: ${delay} seconds`);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        const messageBody = beginCell()
            .storeUint(0x695f7764, 32) // OP_WITHDRAW
            .storeRef(beginCell().storeAddress(recipient).endCell())
            .storeCoins(amount)
            .storeUint(5, 64) // depositId
            .storeUint(feeRate, 32)
            .storeUint(delay, 32)
            .endCell();
        
        ui.write(`Message Body Hash: ${messageBody.hash().toString('hex')}`);
        ui.write(`Message Body Bits: ${messageBody.bits}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await mixton.sendInternal(provider.sender(), {
            value: toNano('0.1'),
            body: messageBody,
            bounce: false
        });
        
        ui.write(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!`);
        
        // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await new Promise(resolve => setTimeout(resolve, 5000));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞
        const queueInfoAfter = await mixton.getQueueInfo();
        ui.write(`Queue Length –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞: ${queueInfoAfter.queueLength}`);
        ui.write(`Queue Amount –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞: ${queueInfoAfter.totalAmount} TON`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–µ–ø–æ–∑–∏—Ç–∞
        const depositInfoAfter = await mixton.getDepositInfo(5n);
        ui.write(`Deposit #5 Status –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞: ${depositInfoAfter.status}`);
        
    } catch (error) {
        ui.write(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞: ${error instanceof Error ? error.message : String(error)}`);
    }

    // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –Ω–∞–ø—Ä—è–º—É—é
    ui.write(`\n=== –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏ ===`);
    
    try {
        const queueDetails = await mixton.getQueueDetails();
        ui.write(`Queue Details:`);
        ui.write(`  Length: ${queueDetails.queueLength}`);
        ui.write(`  Total Amount: ${queueDetails.totalAmount} TON`);
        ui.write(`  Next Time: ${queueDetails.nextTime}`);
        
        const queueStatus = await mixton.getQueueStatus();
        ui.write(`Queue Status: ${queueStatus} (0=–ø—É—Å—Ç–∞, 1=–æ–∂–∏–¥–∞–µ—Ç, 2=–≥–æ—Ç–æ–≤–∞)`);
        
        const minNextTime = await mixton.getMinNextTime();
        ui.write(`Min Next Time: ${minNextTime}`);
        
    } catch (error) {
        ui.write(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–µ—Ä–µ–¥–∏: ${error instanceof Error ? error.message : String(error)}`);
    }

    // –®–∞–≥ 5: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å
    ui.write(`\n=== –®–∞–≥ 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ ===`);
    
    try {
        const balanceBefore = await provider.provider(mixton.address).getState();
        ui.write(`Contract Balance Before Processing: ${balanceBefore.balance} TON`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
        await mixton.sendProcessQueue(provider.sender(), toNano('0.05'));
        ui.write(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!`);
        
        // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await new Promise(resolve => setTimeout(resolve, 5000));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        const balanceAfter = await provider.provider(mixton.address).getState();
        ui.write(`Contract Balance After Processing: ${balanceAfter.balance} TON`);
        ui.write(`Balance Change: ${balanceAfter.balance - balanceBefore.balance} TON`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å —Å–Ω–æ–≤–∞
        const queueInfoAfterProcess = await mixton.getQueueInfo();
        ui.write(`Queue Length –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${queueInfoAfterProcess.queueLength}`);
        ui.write(`Queue Amount –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${queueInfoAfterProcess.totalAmount} TON`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const statsAfter = await mixton.getBasicStats();
        ui.write(`Total Withdrawn –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${statsAfter.totalWithdrawn} TON`);
        
    } catch (error) {
        ui.write(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏: ${error instanceof Error ? error.message : String(error)}`);
    }

    // –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    ui.write(`\n=== –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ===`);
    
    try {
        const history = await mixton.getTransactionHistory();
        ui.write(`Transaction History Records: ${history.bits} bits`);
        ui.write(`Transaction History Cells: ${history.cells.length}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        const perfStats = await mixton.getPerformanceStats();
        ui.write(`Performance Stats:`);
        ui.write(`  Last Processed Time: ${new Date(perfStats.lastProcessedTime * 1000).toISOString()}`);
        ui.write(`  Failed Transactions: ${perfStats.failedTransactions}`);
        ui.write(`  Current Queue Size: ${perfStats.queueSize}`);
        
    } catch (error) {
        ui.write(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: ${error instanceof Error ? error.message : String(error)}`);
    }

    // –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    ui.write(`\n=== –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π ===`);
    
    const recipients = [
        { name: 'Recipient 1', address: 'EQCD--pPXB5Q8zE1MqTj2b7P4uZJ5gK6sLqT3V7JYmN9kXpLqT' },
        { name: 'Recipient 2', address: 'EQDi6a6j5TUfF5dZcDvDZaYrG7YzxHAF7omZubrNJgJdxefE' },
        { name: 'Recipient 3', address: 'EQAHYc6-e1vgRLTAVGnHxUcHx4vIhuVFbcn912rBFLkOLEZW' }
    ];
    
    for (const recipient of recipients) {
        try {
            const recipientState = await provider.provider(Address.parse(recipient.address)).getState();
            ui.write(`${recipient.name} Balance: ${recipientState.balance} TON`);
        } catch (error) {
            ui.write(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ ${recipient.name}: ${error instanceof Error ? error.message : String(error)}`);
        }
    }

    ui.write(`\nüéØ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!`);
}