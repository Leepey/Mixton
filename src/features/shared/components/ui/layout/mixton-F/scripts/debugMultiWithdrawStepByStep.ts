// scripts/debugMultiWithdrawStepByStep.ts
import { Address, toNano, beginCell } from '@ton/core';
import { Mixton } from '../wrappers/Mixton';
import { NetworkProvider } from '@ton/blueprint';

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–º—ã
function formatAmount(amount: bigint): string {
    return (Number(amount) / 1000000000).toFixed(9);
}

export async function run(provider: NetworkProvider) {
    const ui = provider.ui();

    const contractAddressFromEnv = process.env.CONTRACT_ADDRESS;
    if (!contractAddressFromEnv) {
        throw new Error('Contract address not found. Please set CONTRACT_ADDRESS in your .env file.');
    }
    const contractAddress = Address.parse(contractAddressFromEnv);
    const mixton = provider.open(Mixton.createFromAddress(contractAddress));

    ui.write(`üîç Step-by-Step Debug Multi-Withdrawal for: ${mixton.address.toString()}\n`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ sender.address —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const senderAddress = provider.sender().address;
    if (!senderAddress) {
        ui.write(`‚ùå Sender address is undefined`);
        return;
    }

    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ui.write(`üìã Step 1: Checking current state`);
    const basicStats = await mixton.getBasicStats();
    const queueInfo = await mixton.getQueueInfo();
    const queueDetails = await mixton.getQueueDetails();
    
    ui.write(`   Total Deposits: ${basicStats.totalDeposits}`);
    ui.write(`   Total Withdrawn: ${formatAmount(basicStats.totalWithdrawn)} TON`);
    ui.write(`   Queue Length: ${queueInfo.queueLength}`);
    ui.write(`   Queue Amount: ${formatAmount(queueInfo.totalAmount)} TON`);
    ui.write(`   Queue Details: Length=${queueDetails.queueLength}, Amount=${formatAmount(queueDetails.totalAmount)} TON, NextTime=${queueDetails.nextTime}`);

    // –®–∞–≥ 2: –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç
    ui.write(`\nüìã Step 2: Finding available deposit`);
    let availableDepositId = -1;
    
    for (let i = 0; i <= 4; i++) {
        const depositInfo = await mixton.getDepositInfo(BigInt(i));
        if (depositInfo && depositInfo.depositTime !== -1) {
            ui.write(`   Deposit #${i}: Status=${depositInfo.status === 0 ? 'Pending' : depositInfo.status === 1 ? 'Processed' : 'Failed'}`);
            
            if (depositInfo.status === 0) { // Pending
                availableDepositId = i;
                break;
            }
        } else {
            ui.write(`   Deposit #${i}: Not found`);
        }
    }

    if (availableDepositId === -1) {
        ui.write(`‚ùå No available deposits in Pending status found.`);
        return;
    }

    ui.write(`   Using Deposit #${availableDepositId}`);

    // –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤—ã–≤–æ–¥ (–Ω–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π) –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    ui.write(`\nüìã Step 3: Creating simple withdrawal for testing`);
    const recipient = Address.parse('0QDi6a6j5TUfF5dZcDvDZaYrG7YzxHAF7omZubrNJgJdxQGL');
    const withdrawAmount = toNano('0.5');
    const feeRate = 200;
    const delay = 30;

    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –¥–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
    const getBalance = async (address: Address) => {
        try {
            const state = await provider.provider(address).getState();
            return state.balance;
        } catch (e) {
            return 0n;
        }
    };

    const contractBalanceBefore = await mixton.getBalance();
    const recipientBalanceBefore = await getBalance(recipient);
    const senderBalanceBefore = await getBalance(senderAddress);

    ui.write(`   Contract Balance Before: ${formatAmount(contractBalanceBefore)} TON`);
    ui.write(`   Recipient Balance Before: ${formatAmount(recipientBalanceBefore)} TON`);
    ui.write(`   Sender Balance Before: ${formatAmount(senderBalanceBefore)} TON`);

    try {
        ui.write(`   Sending withdrawal request...`);
        const result = await mixton.sendWithdraw(
            provider.sender(),
            recipient,
            withdrawAmount,
            BigInt(availableDepositId),
            feeRate,
            delay,
            toNano('0.05')
        );
        ui.write(`   ‚úÖ Withdrawal request sent successfully!`);

        // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞
        ui.write(`\nüìã Step 4: Checking state after withdrawal`);
        const queueInfoAfter = await mixton.getQueueInfo();
        const queueDetailsAfter = await mixton.getQueueDetails();
        const basicStatsAfter = await mixton.getBasicStats();
        
        ui.write(`   Queue Length: ${queueInfoAfter.queueLength}`);
        ui.write(`   Queue Amount: ${formatAmount(queueInfoAfter.totalAmount)} TON`);
        ui.write(`   Queue Details: Length=${queueDetailsAfter.queueLength}, Amount=${formatAmount(queueDetailsAfter.totalAmount)} TON, NextTime=${queueDetailsAfter.nextTime}`);
        ui.write(`   Total Withdrawn: ${formatAmount(basicStatsAfter.totalWithdrawn)} TON`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–µ–ø–æ–∑–∏—Ç–∞
        const depositInfoAfter = await mixton.getDepositInfo(BigInt(availableDepositId));
        if (depositInfoAfter) {
            ui.write(`   Deposit Status: ${depositInfoAfter.status === 0 ? 'Pending' : depositInfoAfter.status === 1 ? 'Processed' : 'Failed'}`);
        } else {
            ui.write(`   Deposit Info: Not found`);
        }

        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        const contractBalanceAfter = await mixton.getBalance();
        const recipientBalanceAfter = await getBalance(recipient);
        const senderBalanceAfter = await getBalance(senderAddress);

        ui.write(`   Contract Balance After: ${formatAmount(contractBalanceAfter)} TON`);
        ui.write(`   Recipient Balance After: ${formatAmount(recipientBalanceAfter)} TON`);
        ui.write(`   Sender Balance After: ${formatAmount(senderBalanceAfter)} TON`);

        // –®–∞–≥ 5: –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –Ω–µ –ø—É—Å—Ç–∞, –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–µ
        if (queueInfoAfter.queueLength > 0) {
            ui.write(`\nüìã Step 5: Processing queue`);
            ui.write(`   Waiting for queue to mature...`);
            
            // –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥
            ui.write(`   Waiting 30 seconds...`);
            await new Promise(resolve => setTimeout(resolve, 30000));
            
            try {
                const processResult = await mixton.sendProcessQueue(provider.sender(), toNano('0.05'));
                ui.write(`   ‚úÖ Queue processing sent!`);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                const queueInfoProcessed = await mixton.getQueueInfo();
                const basicStatsProcessed = await mixton.getBasicStats();
                
                ui.write(`   Queue Length After Processing: ${queueInfoProcessed.queueLength}`);
                ui.write(`   Total Withdrawn After Processing: ${formatAmount(basicStatsProcessed.totalWithdrawn)} TON`);

                // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
                const contractBalanceFinal = await mixton.getBalance();
                const recipientBalanceFinal = await getBalance(recipient);
                const senderBalanceFinal = await getBalance(senderAddress);

                ui.write(`   Contract Balance Final: ${formatAmount(contractBalanceFinal)} TON`);
                ui.write(`   Recipient Balance Final: ${formatAmount(recipientBalanceFinal)} TON`);
                ui.write(`   Sender Balance Final: ${formatAmount(senderBalanceFinal)} TON`);

                ui.write(`   Recipient Balance Change: ${formatAmount(recipientBalanceFinal - recipientBalanceBefore)} TON`);
                ui.write(`   Contract Balance Change: ${formatAmount(contractBalanceFinal - contractBalanceBefore)} TON`);

            } catch (error) {
                ui.write(`   ‚ùå Error processing queue: ${error instanceof Error ? error.message : String(error)}`);
            }
        } else {
            ui.write(`   ‚ùå Queue is empty after withdrawal. This indicates a problem.`);
        }

    } catch (error) {
        ui.write(`   ‚ùå Error sending withdrawal: ${error instanceof Error ? error.message : String(error)}`);
    }

    // –®–∞–≥ 6: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    ui.write(`\nüìã Step 6: Final state check`);
    const finalQueueInfo = await mixton.getQueueInfo();
    const finalBasicStats = await mixton.getBasicStats();
    
    ui.write(`   Final Queue Length: ${finalQueueInfo.queueLength}`);
    ui.write(`   Final Total Withdrawn: ${formatAmount(finalBasicStats.totalWithdrawn)} TON`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã
    for (let i = 0; i <= 4; i++) {
        const depositInfo = await mixton.getDepositInfo(BigInt(i));
        if (depositInfo && depositInfo.depositTime !== -1) {
            ui.write(`   Deposit #${i}: Status=${depositInfo.status === 0 ? 'Pending' : depositInfo.status === 1 ? 'Processed' : 'Failed'}`);
        } else {
            ui.write(`   Deposit #${i}: Not found`);
        }
    }
}