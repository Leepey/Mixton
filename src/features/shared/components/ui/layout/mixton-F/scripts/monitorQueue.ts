import { Mixton } from '../wrappers/Mixton';
import { toNano, Address } from '@ton/core';
import { NetworkProvider } from '@ton/blueprint';
import { config } from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

export async function run(provider: NetworkProvider) {
    const ui = provider.ui();

    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏–∑ .env
    const contractAddress = process.env.CONTRACT_ADDRESS;
    if (!contractAddress) {
        throw new Error('CONTRACT_ADDRESS not found in .env file');
    }

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å –∞–¥—Ä–µ—Å–æ–º –∏–∑ .env
    const mixton = provider.open(Mixton.createFromAddress(Address.parse(contractAddress)));

    ui.write(`üîÑ Monitoring Mixton Queue`);
    ui.write(`üìç Contract address: ${contractAddress}`);

    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        const queueInfo = await mixton.getQueueInfo();
        const queueStatus = await mixton.getQueueStatus();
        const minNextTime = await mixton.getMinNextTime();

        ui.write(`\nüìä Current Queue Status:`);
        ui.write(`   Queue Length: ${queueInfo.queueLength}`);
        ui.write(`   Total Amount: ${(Number(queueInfo.totalAmount) / 1000000000).toFixed(9)} TON`);
        ui.write(`   Status: ${queueStatus} (0=empty, 1=waiting, 2=ready)`);

        if (queueInfo.queueLength === 0) {
            ui.write(`‚úÖ Queue is empty. Nothing to process.`);
            return;
        }

        if (minNextTime > 0) {
            const nextTime = new Date(minNextTime * 1000);
            const currentTime = new Date();
            const timeUntilNext = Math.max(0, Math.floor((nextTime.getTime() - currentTime.getTime()) / 1000));
            
            ui.write(`\n‚è∞ Next Processing Time: ${nextTime.toLocaleString()}`);
            ui.write(`   Time until next: ${timeUntilNext} seconds`);
            
            if (timeUntilNext <= 0) {
                ui.write(`\nüéØ Time to process! Queue is ready.`);
                
                // –ü–æ–ª—É—á–∞–µ–º ID —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                const nextQueueItemId = await mixton.getNextQueueItemId();
                
                if (nextQueueItemId >= BigInt(0)) {
                    ui.write(`   Processing queue item ID: ${nextQueueItemId}`);
                    
                    await mixton.sendProcessQueue(
                        provider.sender(),
                        nextQueueItemId,
                        toNano('0.15')
                    );

                    ui.write(`‚úÖ Queue processing started!`);

                    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    await new Promise(resolve => setTimeout(resolve, 10000));

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    const newQueueInfo = await mixton.getQueueInfo();
                    const newQueueStatus = await mixton.getQueueStatus();
                    const basicStats = await mixton.getBasicStats();

                    ui.write(`\nüìä Updated Queue Status:`);
                    ui.write(`   Queue Length: ${newQueueInfo.queueLength}`);
                    ui.write(`   Total Amount: ${(Number(newQueueInfo.totalAmount) / 1000000000).toFixed(9)} TON`);
                    ui.write(`   Status: ${newQueueStatus}`);
                    ui.write(`   Total Withdrawn: ${(Number(basicStats.totalWithdrawn) / 1000000000).toFixed(9)} TON`);
                    ui.write(`   Items Processed: ${queueInfo.queueLength - newQueueInfo.queueLength}`);
                } else {
                    ui.write(`‚ö†Ô∏è  No items ready for processing.`);
                }
            } else {
                ui.write(`\n‚è≥ Queue is not ready yet. Please wait ${timeUntilNext} seconds.`);
                
                // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞
                const choices = [
                    { name: 'Yes, wait and check again' },
                    { name: 'No, exit' }
                ];
                
                const shouldWait = await ui.choose('Wait and check again?', choices, (choice) => choice.name);
                
                if (shouldWait.name === 'Yes, wait and check again') {
                    ui.write(`‚è≥ Waiting for ${Math.min(timeUntilNext, 60)} seconds...`);
                    await new Promise(resolve => setTimeout(resolve, Math.min(timeUntilNext, 60) * 1000));
                    
                    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Å–Ω–æ–≤–∞
                    await run(provider);
                }
            }
        } else {
            ui.write(`\n‚ùì No next processing time found.`);
        }

    } catch (error) {
        ui.write(`‚ùå Error monitoring queue: ${error instanceof Error ? error.message : String(error)}`);
    }
}