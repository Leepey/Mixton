// scripts/debugWithdrawFunctionDetailed.ts
import { Address, toNano, beginCell } from '@ton/core';
import { Mixton } from '../wrappers/Mixton';
import { NetworkProvider } from '@ton/blueprint';

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–º—ã
function formatAmount(amount: bigint): string {
    return (Number(amount) / 1000000000).toFixed(9);
}

export async function run(provider: NetworkProvider) {
    const ui = provider.ui();

    const contractAddressFromEnv = process.env.CONTRACT_ADDRESS;
    if (!contractAddressFromEnv) {
        throw new Error('Contract address not found. Please set CONTRACT_ADDRESS in your .env file.');
    }
    const contractAddress = Address.parse(contractAddressFromEnv);
    const mixton = provider.open(Mixton.createFromAddress(contractAddress));

    ui.write(`üîç Detailed Debug of Withdraw Function for: ${mixton.address.toString()}\n`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const basicStatsBefore = await mixton.getBasicStats();
    const queueInfoBefore = await mixton.getQueueInfo();
    const depositInfoBefore = await mixton.getDepositInfo(1n); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ø–æ–∑–∏—Ç #1

    ui.write(`üìä State Before Withdrawal:`);
    ui.write(`   Total Deposits: ${basicStatsBefore.totalDeposits}`);
    ui.write(`   Total Withdrawn: ${formatAmount(basicStatsBefore.totalWithdrawn)} TON`);
    ui.write(`   Queue Length: ${queueInfoBefore.queueLength}`);
    ui.write(`   Queue Amount: ${formatAmount(queueInfoBefore.totalAmount)} TON`);
    ui.write(`   Deposit #1 Status: ${depositInfoBefore?.status === 0 ? 'Pending' : depositInfoBefore?.status === 1 ? 'Processed' : 'Not found'}`);

    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
    const getBalance = async (address: Address) => {
        try {
            const state = await provider.provider(address).getState();
            return state.balance;
        } catch (e) {
            return 0n;
        }
    };

    const contractBalanceBefore = await mixton.getBalance();
    const recipientBalanceBefore = await getBalance(Address.parse('0QDi6a6j5TUfF5dZcDvDZaYrG7YzxHAF7omZubrNJgJdxQGL'));
    const adminBalanceBefore = await getBalance(await mixton.getAdmin());

    ui.write(`\nüí∞ Balances Before:`);
    ui.write(`   Contract: ${formatAmount(contractBalanceBefore)} TON`);
    ui.write(`   Recipient: ${formatAmount(recipientBalanceBefore)} TON`);
    ui.write(`   Admin: ${formatAmount(adminBalanceBefore)} TON`);

    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Ä—É—á–Ω—É—é
    ui.write(`\nüìù Creating withdrawal message manually...`);
    
    const recipient = Address.parse('0QDi6a6j5TUfF5dZcDvDZaYrG7YzxHAF7omZubrNJgJdxQGL');
    const amount = toNano('0.3');
    const depositId = 1n;
    const feeRate = 200;
    const delay = 30;

    ui.write(`   Recipient: ${recipient.toString()}`);
    ui.write(`   Amount: ${formatAmount(amount)} TON`);
    ui.write(`   Deposit ID: #${depositId}`);
    ui.write(`   Fee Rate: ${feeRate / 100}%`);
    ui.write(`   Delay: ${delay} seconds`);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
    const messageBody = beginCell()
        .storeUint(0x695f7764, 32) // OP_WITHDRAW
        .storeRef(beginCell().storeAddress(recipient).endCell())
        .storeCoins(amount)
        .storeUint(depositId, 64)
        .storeUint(feeRate, 32)
        .storeUint(delay, 32)
        .endCell();

    ui.write(`   Message Body Hash: ${messageBody.hash().toString('hex')}`);
    ui.write(`   Message Body Bits: ${messageBody.bits.length}`);

    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ sendWithdraw
        ui.write(`\nüí∏ Sending withdrawal message using sendWithdraw...`);
        
        const result = await mixton.sendWithdraw(
            provider.sender(),
            recipient,
            amount,
            depositId,
            feeRate,
            delay,
            toNano('0.05')
        );

        ui.write(`   ‚úÖ Message sent successfully!`);

        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        ui.write(`\n‚è≥ Waiting for transaction to settle...`);
        await new Promise(resolve => setTimeout(resolve, 5000));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        ui.write(`\nüìä State After Withdrawal:`);
        const basicStatsAfter = await mixton.getBasicStats();
        const queueInfoAfter = await mixton.getQueueInfo();
        const depositInfoAfter = await mixton.getDepositInfo(1n);

        ui.write(`   Total Deposits: ${basicStatsAfter.totalDeposits}`);
        ui.write(`   Total Withdrawn: ${formatAmount(basicStatsAfter.totalWithdrawn)} TON`);
        ui.write(`   Queue Length: ${queueInfoAfter.queueLength}`);
        ui.write(`   Queue Amount: ${formatAmount(queueInfoAfter.totalAmount)} TON`);
        ui.write(`   Deposit #1 Status: ${depositInfoAfter?.status === 0 ? 'Pending' : depositInfoAfter?.status === 1 ? 'Processed' : 'Not found'}`);

        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        const contractBalanceAfter = await mixton.getBalance();
        const recipientBalanceAfter = await getBalance(recipient);
        const adminBalanceAfter = await getBalance(await mixton.getAdmin());

        ui.write(`\nüí∞ Balances After:`);
        ui.write(`   Contract: ${formatAmount(contractBalanceAfter)} TON`);
        ui.write(`   Recipient: ${formatAmount(recipientBalanceAfter)} TON`);
        ui.write(`   Admin: ${formatAmount(adminBalanceAfter)} TON`);

        ui.write(`\nüí∏ Balance Changes:`);
        ui.write(`   Contract: ${formatAmount(contractBalanceAfter - contractBalanceBefore)} TON`);
        ui.write(`   Recipient: ${formatAmount(recipientBalanceAfter - recipientBalanceBefore)} TON`);
        ui.write(`   Admin: ${formatAmount(adminBalanceAfter - adminBalanceBefore)} TON`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—á–µ—Ä–µ–¥–∏
        const queueDetailsAfter = await mixton.getQueueDetails();
        ui.write(`\nüìã Queue Details After:`);
        ui.write(`   Length: ${queueDetailsAfter.queueLength}`);
        ui.write(`   Amount: ${formatAmount(queueDetailsAfter.totalAmount)} TON`);
        ui.write(`   Next Time: ${queueDetailsAfter.nextTime}`);

        // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        ui.write(`\nüîç Analysis:`);
        
        const queueLengthChanged = queueInfoBefore.queueLength !== queueInfoAfter.queueLength;
        const totalWithdrawnChanged = basicStatsBefore.totalWithdrawn !== basicStatsAfter.totalWithdrawn;
        const contractBalanceChanged = contractBalanceBefore !== contractBalanceAfter;
        const depositStatusChanged = depositInfoBefore?.status !== depositInfoAfter?.status;

        ui.write(`   Queue Length Changed: ${queueLengthChanged}`);
        ui.write(`   Total Withdrawn Changed: ${totalWithdrawnChanged}`);
        ui.write(`   Contract Balance Changed: ${contractBalanceChanged}`);
        ui.write(`   Deposit Status Changed: ${depositStatusChanged}`);

        if (!queueLengthChanged && !totalWithdrawnChanged && !contractBalanceChanged && !depositStatusChanged) {
            ui.write(`   ‚ö†Ô∏è  NO CHANGES DETECTED!`);
            ui.write(`   This indicates that the withdraw function is not working properly.`);
            ui.write(`   The function may be failing silently or not executing at all.`);
            
            // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–µ
            ui.write(`\nüí° Possible Issues:`);
            ui.write(`   1. Function is not being called due to wrong OP code`);
            ui.write(`   2. Function is failing validation but not throwing exception`);
            ui.write(`   3. Function is executing but not saving state changes`);
            ui.write(`   4. Function is creating queue items but they're being immediately removed`);
            ui.write(`   5. Admin authorization check is failing`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            const isAdmin = await mixton.isAdmin(provider.sender().address);
            ui.write(`\nüë§ Admin Check:`);
            ui.write(`   Sender is Admin: ${isAdmin}`);
            if (!isAdmin) {
                ui.write(`   ‚ùå SENDER IS NOT ADMIN! This is likely the issue.`);
                ui.write(`   The withdraw function requires admin privileges.`);
            }
            
        } else {
            ui.write(`   ‚úÖ Some changes detected - function may be working partially`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        const history = await mixton.getTransactionHistory();
        ui.write(`\nüìã Transaction History Records: ${history.length}`);

        // –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –Ω–æ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞, –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
        if (queueInfoAfter.queueLength === 0 && !queueLengthChanged) {
            ui.write(`\nüîÑ Queue is empty but should have items. Trying to process anyway...`);
            
            try {
                await mixton.sendProcessQueue(provider.sender(), toNano('0.05'));
                ui.write(`   ‚úÖ Queue processing sent!`);
                
                // –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
                await new Promise(resolve => setTimeout(resolve, 5000));
                
                const finalQueueInfo = await mixton.getQueueInfo();
                const finalBasicStats = await mixton.getBasicStats();
                
                ui.write(`   Final Queue Length: ${finalQueueInfo.queueLength}`);
                ui.write(`   Final Total Withdrawn: ${formatAmount(finalBasicStats.totalWithdrawn)} TON`);
                
                if (finalQueueInfo.queueLength === 0) {
                    ui.write(`   ‚ùå Queue is still empty - confirming the issue`);
                }
            } catch (error) {
                ui.write(`   ‚ùå Error processing queue: ${error instanceof Error ? error.message : String(error)}`);
            }
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        ui.write(`\n‚öôÔ∏è Contract Parameters:`);
        const mixerParams = await mixton.getMixerParams();
        const currentFeeRate = await mixton.getCurrentFeeRate();
        
        ui.write(`   Min Fee Rate: ${mixerParams.minFeeRate / 100}%`);
        ui.write(`   Max Fee Rate: ${mixerParams.maxFeeRate / 100}%`);
        ui.write(`   Current Fee Rate: ${currentFeeRate / 100}%`);
        ui.write(`   Min Delay: ${mixerParams.minDelay} seconds`);
        ui.write(`   Max Delay: ${mixerParams.maxDelay} seconds`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if (feeRate < mixerParams.minFeeRate || feeRate > mixerParams.maxFeeRate) {
            ui.write(`   ‚ùå Fee rate ${feeRate / 100}% is outside allowed range [${mixerParams.minFeeRate / 100}%, ${mixerParams.maxFeeRate / 100}%]`);
        }
        
        if (delay < mixerParams.minDelay || delay > mixerParams.maxDelay) {
            ui.write(`   ‚ùå Delay ${delay} seconds is outside allowed range [${mixerParams.minDelay}, ${mixerParams.maxDelay}]`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–µ–ø–æ–∑–∏—Ç–∞
        ui.write(`\nüí∞ Deposit Balance Check:`);
        if (depositInfoBefore) {
            const depositAmount = depositInfoBefore.depositTime; // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
            ui.write(`   Deposit #1 exists and is in ${depositInfoBefore.status === 0 ? 'Pending' : 'Processed'} status`);
            
            if (depositInfoBefore.status === 0) {
                ui.write(`   ‚úÖ Deposit is available for withdrawal`);
            } else {
                ui.write(`   ‚ùå Deposit is not available for withdrawal (status: ${depositInfoBefore.status})`);
            }
        } else {
            ui.write(`   ‚ùå Deposit #1 not found`);
        }

    } catch (error) {
        ui.write(`‚ùå Error sending withdrawal message: ${error instanceof Error ? error.message : String(error)}`);
    }
}