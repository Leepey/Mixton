// scripts/monitor.ts
import { NetworkProvider } from '@ton/blueprint';
import { Mixton } from '../wrappers/Mixton';
import { toNano, Address } from '@ton/core';

export async function run(provider: NetworkProvider) {
    const mixton = provider.open(
        Mixton.createFromAddress(Address.parse(process.env.CONTRACT_ADDRESS!))
    );

    console.log('=== Mixton Monitor ===');
    console.log('Contract:', mixton.address.toString());
    
    // –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const stats = await mixton.getBasicStats();
    console.log('\nüìä Basic Stats:');
    console.log(`Total Deposits: ${stats.totalDeposits}`);
    console.log(`Total Withdrawn: ${Mixton.formatAmount(stats.totalWithdrawn)} TON`);
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—á–µ—Ä–µ–¥–∏
    const queueInfo = await mixton.getQueueInfo();
    console.log('\n‚è≥ Queue Info:');
    console.log(`Queue Length: ${queueInfo.queueLength}`);
    console.log(`Queue Amount: ${Mixton.formatAmount(queueInfo.totalAmount)} TON`);
    
    // –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏
    const queueStatus = await mixton.getQueueStatus();
    console.log('\nüîÑ Queue Status:');
    console.log(`Status: ${queueStatus === 0 ? 'Empty' : queueStatus === 1 ? 'Waiting' : 'Ready'}`);
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞—Ö
    const signers = await mixton.getSigners();
    console.log('\nüë• Signers:');
    console.log(`Count: ${signers.count}`);
    console.log(`Required: ${signers.required}`);
    
    // –î–∞–Ω–Ω—ã–µ –æ—Ä–∞–∫—É–ª–∞
    const oracleData = await mixton.getOracleData();
    console.log('\nüîÆ Oracle Data:');
    console.log(`Rate: ${(oracleData.data / 1000000).toFixed(6)} USD/TON`);
    console.log(`Last Update: ${new Date(oracleData.lastUpdate * 1000).toISOString()}`);
    
    // –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const history = await mixton.getTransactionHistory();
    console.log('\nüìù Recent Transactions:');
    history.slice(-5).forEach((tx, i) => {
        const type = tx.txType === 0 ? 'Deposit' : tx.txType === 1 ? 'Withdrawal' : 'Fee';
        const status = tx.status === 0 ? 'Pending' : tx.status === 1 ? 'Completed' : 'Failed';
        console.log(`${i + 1}. ${type} - ${Mixton.formatAmount(tx.amount)} TON - ${status}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    // –ü–æ–ª—É—á–∞–µ–º ContractProvider –∏–∑ NetworkProvider
    const contractProvider = provider.provider(mixton.address);
    const health = await mixton.healthCheck(contractProvider);
    console.log('\nüè• Health Check:');
    console.log(`Status: ${health.healthy ? 'Healthy' : 'Issues detected'}`);
    if (health.issues.length > 0) {
        health.issues.forEach(issue => console.log(`  - ${issue}`));
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    try {
        const perfStats = await mixton.getPerformanceStats();
        console.log('\n‚ö° Performance Stats:');
        console.log(`Last Processed: ${perfStats.lastProcessedTime > 0 ? new Date(perfStats.lastProcessedTime * 1000).toISOString() : 'Never'}`);
        console.log(`Failed Transactions: ${perfStats.failedTransactions}`);
        console.log(`Current Queue Size: ${perfStats.queueSize}`);
    } catch (error) {
        console.log('\n‚ö†Ô∏è Performance stats not available');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—á–µ—Ä–µ–¥–∏
    try {
        const queueDetails = await mixton.getQueueDetails();
        console.log('\nüìã Queue Details:');
        console.log(`Items in Queue: ${queueDetails.queueLength}`);
        console.log(`Total Amount: ${Mixton.formatAmount(queueDetails.totalAmount)} TON`);
        if (queueDetails.nextTime > 0) {
            const nextProcessTime = new Date(queueDetails.nextTime * 1000);
            const now = new Date();
            const timeUntilNext = nextProcessTime.getTime() - now.getTime();
            
            if (timeUntilNext > 0) {
                const minutes = Math.floor(timeUntilNext / 60000);
                const seconds = Math.floor((timeUntilNext % 60000) / 1000);
                console.log(`Next Processing: ${nextProcessTime.toISOString()} (in ${minutes}m ${seconds}s)`);
            } else {
                console.log(`Next Processing: Ready now!`);
            }
        }
    } catch (error) {
        console.log('\n‚ö†Ô∏è Queue details not available');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    try {
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: getBalance –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const balance = await mixton.getBalance();
        console.log('\nüí∞ Contract Balance:');
        console.log(`Balance: ${Mixton.formatAmount(balance)} TON`);
    } catch (error) {
        console.log('\n‚ö†Ô∏è Balance info not available');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∏—Å—Å–∏—è—Ö
    try {
        const currentFeeRate = await mixton.getCurrentFeeRate();
        console.log('\nüí∏ Fee Information:');
        console.log(`Current Fee Rate: ${Mixton.formatFeeRate(currentFeeRate)}`);
    } catch (error) {
        console.log('\n‚ö†Ô∏è Fee info not available');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ
    try {
        const admin = await mixton.getAdmin();
        console.log('\nüë§ Admin Information:');
        console.log(`Admin Address: ${admin.toString()}`);
    } catch (error) {
        console.log('\n‚ö†Ô∏è Admin info not available');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –º–∏–∫—Å–µ—Ä–∞
    try {
        const mixerParams = await mixton.getMixerParams();
        console.log('\n‚öôÔ∏è Mixer Parameters:');
        console.log(`Min Fee Rate: ${Mixton.formatFeeRate(mixerParams.minFeeRate)}`);
        console.log(`Max Fee Rate: ${Mixton.formatFeeRate(mixerParams.maxFeeRate)}`);
        console.log(`Min Delay: ${Mixton.formatDelay(mixerParams.minDelay)}`);
        console.log(`Max Delay: ${Mixton.formatDelay(mixerParams.maxDelay)}`);
    } catch (error) {
        console.log('\n‚ö†Ô∏è Mixer parameters not available');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö
    try {
        const limits = await mixton.getLimits();
        console.log('\nüìè Contract Limits:');
        console.log(`Min Deposit: ${Mixton.formatAmount(limits.minDeposit)} TON`);
        console.log(`Max Deposit: ${Mixton.formatAmount(limits.maxDeposit)} TON`);
        console.log(`Min Withdraw: ${Mixton.formatAmount(limits.minWithdraw)} TON`);
    } catch (error) {
        console.log('\n‚ö†Ô∏è Limits info not available');
    }
}