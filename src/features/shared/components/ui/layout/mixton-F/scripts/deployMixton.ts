// scripts/deployMixton.ts
import { toNano, Address, Cell } from '@ton/core';
import { Mixton } from '../wrappers/Mixton';
import { compile, NetworkProvider } from '@ton/blueprint';
import * as fs from 'fs';
import * as path from 'path';

export async function run(provider: NetworkProvider) {
    console.log('üöÄ Starting Mixton contract deployment script...');

    // Blueprint –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç provider.sender() –Ω–∞ –æ—Å–Ω–æ–≤–µ .env —Ñ–∞–π–ª–∞
    const sender = provider.sender();
    if (!sender || !sender.address) {
        throw new Error('‚ùå Sender not configured. Please ensure your wallet is set up in the .env file (WALLET_MNEMONIC and WALLET_VERSION).');
    }
    const senderAddress = sender.address;
    console.log(`üë§ Deploying from wallet: ${senderAddress.toString()}`);

    // –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    console.log('\nüî® Compiling Mixton contract...');
    let code: Cell;
    try {
        code = await compile('Mixton');
        console.log('‚úÖ Contract compiled successfully');
    } catch (error) {
        console.error('‚ùå Error compiling contract:', error);
        throw error;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å –∞–¥—Ä–µ—Å–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const mixton = provider.open(
        Mixton.createFromConfig(
            {
                admin: senderAddress,
            },
            code
        )
    );

    console.log(`üìç Target contract address: ${mixton.address.toString()}`);

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    const contractProvider = provider.provider(mixton.address);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–æ –¥–µ–ø–ª–æ—è
    try {
        const contractState = await contractProvider.getState();
        if (contractState.state.type === 'active') {
            console.log('‚ÑπÔ∏è  Contract is already deployed and active.');
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        } else {
            console.log(`Contract state before deployment: ${contractState.state.type}`);
        }
    } catch (error) {
        // –û–∂–∏–¥–∞–µ–º–æ, –µ—Å–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –µ—â–µ –Ω–µ –∑–∞–¥–µ–ø–ª–æ–µ–Ω
        console.log('‚ÑπÔ∏è  Contract not found on-chain, proceeding with deployment.');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    console.log('\nüí∞ Checking sender balance...');
    try {
        const senderProvider = provider.provider(senderAddress);
        const senderState = await senderProvider.getState();
        const senderBalance = senderState.balance;
        console.log(`Sender balance: ${Mixton.formatAmount(senderBalance)} TON`);

        const deployCost = toNano('0.5'); // –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–µ–ø–ª–æ—è + –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        if (senderBalance < deployCost) {
            throw new Error(`‚ùå Insufficient balance for deployment. Required: at least ${Mixton.formatAmount(deployCost)} TON, Available: ${Mixton.formatAmount(senderBalance)} TON`);
        }
        console.log('‚úÖ Sender balance is sufficient for deployment.');
    } catch (error) {
        console.error('‚ùå Error checking sender balance:', error);
        throw new Error('Failed to check sender balance. Ensure the wallet is funded and the network is accessible.');
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–µ–ø–ª–æ—è, –µ—Å–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
    if ((await contractProvider.getState()).state.type !== 'active') {
        console.log('\nüì§ Sending deployment transaction...');
        try {
            const deployResult = await mixton.sendDeploy(sender, toNano('0.5'));
            console.log('‚úÖ Deployment transaction sent successfully');
        } catch (error) {
            console.error('‚ùå Error sending deployment transaction:', error);
            throw error;
        }

        // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–µ–ø–ª–æ—è
        console.log('‚è≥ Waiting for deployment to complete (this may take a minute)...');
        try {
            await provider.waitForDeploy(mixton.address, 30); // –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
            console.log('‚úÖ Mixton contract deployed successfully!');
        } catch (error) {
            console.error('‚ùå Error waiting for deployment confirmation:', error);
            throw error;
        }
    } else {
        console.log('‚è≠Ô∏è  Contract is already active. Skipping deployment transaction.');
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
    console.log('\nüìä Retrieving contract information...');
    try {
        const contractAdmin = await mixton.getAdmin();
        console.log(`Admin address: ${contractAdmin.toString()}`);
        console.log(`Expected admin: ${senderAddress.toString()}`);
        if (contractAdmin.toString() !== senderAddress.toString()) {
            console.warn('‚ö†Ô∏è  Warning: Admin address does not match the sender address!');
        } else {
            console.log('‚úÖ Admin address matches sender address.');
        }

        const params = await mixton.getMixerParams();
        console.log('\n‚öôÔ∏è Mixer Parameters:');
        console.log(`  Min fee rate: ${(params.minFeeRate / 100).toFixed(2)}%`);
        console.log(`  Max fee rate: ${(params.maxFeeRate / 100).toFixed(2)}%`);
        console.log(`  Min delay: ${params.minDelay} seconds (${Mixton.formatDelay(params.minDelay)})`);
        console.log(`  Max delay: ${params.maxDelay} seconds (${Mixton.formatDelay(params.maxDelay)})`);

        const limits = await mixton.getLimits();
        console.log('\nüìã Contract Limits:');
        console.log(`  Min deposit: ${Mixton.formatAmount(limits.minDeposit)} TON`);
        console.log(`  Max deposit: ${Mixton.formatAmount(limits.maxDeposit)} TON`);
        console.log(`  Min withdraw: ${Mixton.formatAmount(limits.minWithdraw)} TON`);

        const stats = await mixton.getBasicStats();
        console.log('\nüìà Initial Statistics:');
        console.log(`  Total deposits: ${stats.totalDeposits}`);
        console.log(`  Total withdrawn: ${Mixton.formatAmount(stats.totalWithdrawn)} TON`);

        const health = await mixton.healthCheck(contractProvider);
        console.log('\nüè• Health Check:');
        console.log(`Status: ${health.healthy ? '‚úÖ HEALTHY' : '‚ùå UNHEALTHY'}`);
        if (health.issues.length > 0) {
            console.log(`Issues: ${health.issues.join(', ')}`);
        }

        const queueStatusNumber = await mixton.getQueueStatus();
        console.log('\n‚è≥ Queue Status:');
        let statusText = 'Unknown';
        if (queueStatusNumber === 0) statusText = 'Empty';
        else if (queueStatusNumber === 1) statusText = 'Waiting';
        else if (queueStatusNumber === 2) statusText = 'Ready';
        console.log(`Status: ${statusText}`);

        const contractStateAfterDeploy = await contractProvider.getState();
        console.log(`\nüí∞ Contract Balance: ${Mixton.formatAmount(contractStateAfterDeploy.balance)} TON`);

        console.log('\n‚úÖ Deployment process completed successfully!');

        const explorerLink = provider.network() === 'testnet'
            ? `https://testnet.tonscan.org/address/${mixton.address.toString()}`
            : `https://tonscan.org/address/${mixton.address.toString()}`;
        console.log(`üîó Contract Explorer Link: ${explorerLink}`);

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ .env —Ñ–∞–π–ª
        console.log('\nüíæ Saving contract address to .env file...');
        const envPath = path.resolve(__dirname, '..', '.env');
        let envContent = '';

        if (fs.existsSync(envPath)) {
            envContent = fs.readFileSync(envPath, 'utf8');
        } else {
            console.log('.env file not found. Creating a new one.');
        }

        const contractAddressLine = `CONTRACT_ADDRESS=${mixton.address.toString()}`;
        const contractAddressRegex = /^CONTRACT_ADDRESS=.*$/m;

        if (contractAddressRegex.test(envContent)) {
            envContent = envContent.replace(contractAddressRegex, contractAddressLine);
        } else {
            if (envContent.length > 0 && !envContent.endsWith('\n')) {
                envContent += '\n';
            }
            envContent += `${contractAddressLine}\n`;
        }

        fs.writeFileSync(envPath, envContent);
        console.log('‚úÖ Contract address saved to .env file');

    } catch (error) {
        console.error('‚ùå Error reading contract information after deployment:', error);
        throw error;
    }
}