import { Mixton } from '../wrappers/Mixton';
import { toNano, Address } from '@ton/core';
import { NetworkProvider } from '@ton/blueprint';
import { config } from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

export async function run(provider: NetworkProvider) {
    const ui = provider.ui();

    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏–∑ .env
    const contractAddress = process.env.CONTRACT_ADDRESS;
    if (!contractAddress) {
        throw new Error('CONTRACT_ADDRESS not found in .env file');
    }

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å –∞–¥—Ä–µ—Å–æ–º –∏–∑ .env
    const mixton = provider.open(Mixton.createFromAddress(Address.parse(contractAddress)));

    ui.write(`üîÑ Processing withdrawal queue...`);

    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        const queueInfo = await mixton.getQueueInfo();
        const queueStatus = await mixton.getQueueStatus();
        const minNextTime = await mixton.getMinNextTime();

        ui.write(`üìä Current queue status:`);
        ui.write(`   Queue length: ${queueInfo.queueLength}`);
        ui.write(`   Total amount in queue: ${queueInfo.totalAmount.toString()} nanoTON`);
        ui.write(`   Queue status: ${queueStatus} (0=empty, 1=waiting, 2=ready)`);
        ui.write(`   Next processing time: ${minNextTime > 0 ? new Date(minNextTime * 1000).toLocaleString() : 'N/A'}`);

        if (queueInfo.queueLength === 0) {
            ui.write(`‚úÖ Queue is empty. Nothing to process.`);
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º ID —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        const nextQueueItemId = await mixton.getNextQueueItemId();
        
        if (nextQueueItemId >= BigInt(0)) {
            ui.write(`üéØ Processing queue item ID: ${nextQueueItemId}`);
            
            await mixton.sendProcessQueue(
                provider.sender(),
                nextQueueItemId,
                toNano('0.15') // –∫–æ–º–∏—Å—Å–∏—è –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            );

            ui.write(`‚úÖ Queue processing started!`);

            // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await new Promise(resolve => setTimeout(resolve, 10000));

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const newQueueInfo = await mixton.getQueueInfo();
            const newQueueStatus = await mixton.getQueueStatus();
            const basicStats = await mixton.getBasicStats();

            ui.write(`üìä Updated queue status:`);
            ui.write(`   Queue length: ${newQueueInfo.queueLength}`);
            ui.write(`   Total amount in queue: ${newQueueInfo.totalAmount.toString()} nanoTON`);
            ui.write(`   Queue status: ${newQueueStatus}`);
            ui.write(`   Total withdrawn: ${basicStats.totalWithdrawn.toString()} nanoTON`);
            ui.write(`   Items processed: ${queueInfo.queueLength - newQueueInfo.queueLength}`);

        } else {
            ui.write(`‚è∞ No items ready for processing at the moment.`);
            ui.write(`   Next processing time: ${minNextTime > 0 ? new Date(minNextTime * 1000).toLocaleString() : 'N/A'}`);
        }

    } catch (error) {
        ui.write(`‚ùå Error processing queue: ${error instanceof Error ? error.message : String(error)}`);
    }
}