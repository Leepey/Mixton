import { Mixton } from '../wrappers/Mixton';
import { toNano, Address } from '@ton/core';
import { NetworkProvider } from '@ton/blueprint';
import { config } from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

export async function run(provider: NetworkProvider) {
    const ui = provider.ui();

    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏–∑ .env
    const contractAddress = process.env.CONTRACT_ADDRESS;
    if (!contractAddress) {
        throw new Error('CONTRACT_ADDRESS not found in .env file');
    }

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å –∞–¥—Ä–µ—Å–æ–º –∏–∑ .env
    const mixton = provider.open(Mixton.createFromAddress(Address.parse(contractAddress)));

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–∞—Ö
    try {
        const basicStats = await mixton.getBasicStats();
        const lastDepositId = await mixton.getLastDepositId();
        
        ui.write(`üìä Current Contract Status:`);
        ui.write(`   Total Deposits: ${basicStats.totalDeposits}`);
        ui.write(`   Total Withdrawn: ${(Number(basicStats.totalWithdrawn) / 1000000000).toFixed(9)} TON`);
        ui.write(`   Last Deposit ID: ${lastDepositId}`);
        
        if (basicStats.totalDeposits === 0) {
            ui.write(`‚ùå No deposits found. Please make a deposit first.`);
            ui.write(`üí° Run: npx blueprint run deposit`);
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–∞—Ö
        ui.write(`\nüìã Available Deposits:`);
        for (let i = Math.max(0, Number(lastDepositId) - 4); i <= Number(lastDepositId); i++) {
            try {
                const depositInfo = await mixton.getDepositInfo(BigInt(i));
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ null
                if (depositInfo && depositInfo.depositTime !== -1) {
                    const statusStr = depositInfo.status === 0 ? 'Available' : 'Used';
                    const date = new Date(depositInfo.depositTime * 1000);
                    ui.write(`   ID ${i}: ${statusStr} - Created: ${date.toLocaleString()}`);
                }
            } catch (error) {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –¥–µ–ø–æ–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
            }
        }
        
    } catch (error) {
        ui.write(`‚ö†Ô∏è  Could not load deposit information: ${error instanceof Error ? error.message : String(error)}`);
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const recipientAddress = await ui.input('Recipient address:');
    const amountStr = await ui.input('Amount (in TON):');
    const amount = toNano(amountStr);
    const depositIdStr = await ui.input('Deposit ID:');
    const depositId = BigInt(depositIdStr);
    const feeRateStr = await ui.input('Fee rate (100-500, default 250):');
    const feeRate = feeRateStr ? parseInt(feeRateStr) : 250;
    const delayStr = await ui.input('Delay in seconds (default 60):');
    const delay = delayStr ? parseInt(delayStr) : 60;

    ui.write(`üí∏ Sending withdrawal request...`);
    ui.write(`   Recipient: ${recipientAddress}`);
    ui.write(`   Amount: ${amountStr} TON`);
    ui.write(`   Deposit ID: ${depositId}`);
    ui.write(`   Fee Rate: ${feeRate}`);
    ui.write(`   Delay: ${delay} seconds`);

    try {
        await mixton.sendWithdraw(
            provider.sender(),
            Address.parse(recipientAddress),
            amount,
            depositId,
            feeRate,
            delay,
            toNano('0.1') // –∫–æ–º–∏—Å—Å–∏—è –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        );

        ui.write(`‚úÖ Withdrawal request sent successfully!`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const queueInfo = await mixton.getQueueInfo();
        ui.write(`üìä Current queue status:`);
        ui.write(`   Queue length: ${queueInfo.queueLength}`);
        ui.write(`   Total amount in queue: ${(Number(queueInfo.totalAmount) / 1000000000).toFixed(9)} TON`);

    } catch (error) {
        ui.write(`‚ùå Error sending withdrawal: ${error instanceof Error ? error.message : String(error)}`);
        
        // –î–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        if (error instanceof Error && error.message.includes('Deposit with ID')) {
            ui.write(`üí° Make sure you have a deposit with the specified ID.`);
            ui.write(`üí° Check available deposits with: npx blueprint run debugQueue`);
        }
    }
}