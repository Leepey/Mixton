// scripts/deploy.ts
import { Blockchain, SandboxContract, TreasuryContract } from '@ton/sandbox';
import { Mixton } from '../wrappers/Mixton';
import { toNano, Address, beginCell } from '@ton/core';
import { NetworkProvider } from '@ton/blueprint';
import { compile } from '@ton/blueprint';

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–º—ã
function formatAmount(amount: bigint): string {
    return (Number(amount) / 1000000000).toFixed(9);
}

export async function run(provider: NetworkProvider) {
    const ui = provider.ui();

    const code = await compile('Mixton');
    const mixton = provider.open(
        Mixton.createFromConfig(
            {
                admin: provider.sender().address!,
            },
            code
        )
    );

    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    const senderState = await provider.provider(provider.sender().address!).getState();
    const senderBalance = senderState.balance;

    ui.write(`üöÄ Deploying Mixton contract at address: ${mixton.address.toString()}`);
    ui.write(`üí∞ Sender address: ${provider.sender().address!.toString()}`);
    ui.write(`üí∞ Sender balance: ${formatAmount(senderBalance)} TON`);

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—É–º–º—É –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
    const deployAmount = toNano('3'); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—É–º–º—É –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
    ui.write(`üí∏ Sending deployment transaction with ${formatAmount(deployAmount)} TON...`);
    
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ sendInternal –≤–º–µ—Å—Ç–æ sendDeploy –¥–ª—è –ª—É—á—à–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        await mixton.sendInternal(provider.sender(), {
            value: deployAmount,
            body: beginCell().endCell(),
            bounce: false
        });
        
        // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        ui.write(`‚è≥ Waiting for deployment transaction to be processed...`);
        await new Promise(resolve => setTimeout(resolve, 20000)); // –ñ–¥–µ–º 20 —Å–µ–∫—É–Ω–¥
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        const contractState = await provider.provider(mixton.address).getState();
        const contractBalance = contractState.balance;
        
        ui.write(`üîç Debug info:`);
        ui.write(`Contract balance: ${formatAmount(contractBalance)} TON`);
        ui.write(`Contract state: ${contractState.state.type}`);
        
        // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        const isActive = contractState.state.type === 'active';
        const hasBalance = contractBalance > 0n;
        
        if (isActive && hasBalance) {
            ui.write(`‚úÖ Deployment successful!`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            try {
                const admin = await mixton.getAdmin();
                ui.write(`üë§ Admin address: ${admin.toString()}`);
                
                if (admin.toString() === provider.sender().address!.toString()) {
                    ui.write(`‚úÖ Admin set correctly!`);
                } else {
                    ui.write(`‚ö†Ô∏è  Admin mismatch! Expected: ${provider.sender().address!.toString()}`);
                    ui.write(`üîß Trying to fix admin setting...`);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—â–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    await mixton.sendInternal(provider.sender(), {
                        value: toNano('0.5'),
                        body: beginCell().endCell(),
                        bounce: false
                    });
                    
                    // –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
                    await new Promise(resolve => setTimeout(resolve, 10000));
                    
                    try {
                        const adminAfter = await mixton.getAdmin();
                        ui.write(`üë§ Admin address after fix: ${adminAfter.toString()}`);
                        
                        if (adminAfter.toString() === provider.sender().address!.toString()) {
                            ui.write(`‚úÖ Admin fixed successfully!`);
                        } else {
                            ui.write(`‚ö†Ô∏è  Admin still not set correctly`);
                        }
                    } catch (adminError) {
                        ui.write(`‚ö†Ô∏è  Could not get admin address after fix: ${adminError instanceof Error ? adminError.message : String(adminError)}`);
                    }
                }
            } catch (error) {
                ui.write(`‚ö†Ô∏è  Could not get admin address: ${error instanceof Error ? error.message : String(error)}`);
                ui.write(`üîß Sending additional initialization message...`);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                await mixton.sendInternal(provider.sender(), {
                    value: toNano('0.5'),
                    body: beginCell().endCell(),
                    bounce: false
                });
                
                ui.write(`‚úÖ Initialization message sent!`);
                
                // –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
                await new Promise(resolve => setTimeout(resolve, 10000));
                
                try {
                    const adminAfter = await mixton.getAdmin();
                    ui.write(`üë§ Admin address after initialization: ${adminAfter.toString()}`);
                } catch (initError) {
                    ui.write(`‚ö†Ô∏è  Still could not get admin address: ${initError instanceof Error ? initError.message : String(initError)}`);
                }
            }
            
            // –î–µ–ª–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            ui.write(`\nüí∞ Making test deposit to verify contract functionality...`);
            try {
                await mixton.sendDeposit(provider.sender(), toNano('1'));
                ui.write(`‚úÖ Test deposit sent successfully!`);
                
                // –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await new Promise(resolve => setTimeout(resolve, 5000));
                
                const basicStats = await mixton.getBasicStats();
                ui.write(`üìä Contract stats after test deposit:`);
                ui.write(`   Total Deposits: ${basicStats.totalDeposits}`);
                ui.write(`   Total Withdrawn: ${formatAmount(basicStats.totalWithdrawn)} TON`);
                
            } catch (error) {
                ui.write(`‚ùå Test deposit failed: ${error instanceof Error ? error.message : String(error)}`);
            }
            
        } else {
            ui.write(`‚ùå Deployment failed! Contract is in uninitialized state`);
            
            const senderStateAfter = await provider.provider(provider.sender().address!).getState();
            const senderBalanceAfter = senderStateAfter.balance;
            const balanceDiff = senderBalanceAfter - contractBalance;
            
            ui.write(`Sender balance after deployment attempt: ${formatAmount(senderBalanceAfter)} TON`);
            ui.write(`Balance difference: ${formatAmount(balanceDiff)} TON`);
            
            ui.write(`\nüí° Tips:`);
            ui.write(`1. Check if the transaction was actually sent to the network`);
            ui.write(`2. Verify that you have enough TON for gas fees`);
            ui.write(`3. Try deploying with a higher amount (e.g., 5 TON)`);
            ui.write(`4. Check the contract code for any initialization errors`);
            ui.write(`5. Make sure you're using the correct network (testnet/mainnet)`);
            ui.write(`6. Try to manually initialize the contract with a deposit`);
        }
    } catch (error) {
        ui.write(`‚ùå Error during deployment: ${error instanceof Error ? error.message : String(error)}`);
        
        // –ï—Å–ª–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
        ui.write(`\nüîÑ Trying alternative deployment method...`);
        
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –±–æ–ª—å—à–µ–π —Å—É–º–º–æ–π
            await mixton.sendInternal(provider.sender(), {
                value: toNano('5'),
                body: beginCell().endCell(),
                bounce: false
            });
            
            ui.write(`‚úÖ Alternative initialization sent!`);
            
            // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await new Promise(resolve => setTimeout(resolve, 20000));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const contractState = await provider.provider(mixton.address).getState();
            const isActive = contractState.state.type === 'active';
            
            if (isActive) {
                ui.write(`‚úÖ Contract successfully initialized with alternative method!`);
                
                try {
                    const admin = await mixton.getAdmin();
                    ui.write(`üë§ Admin address: ${admin.toString()}`);
                    
                    if (admin.toString() === provider.sender().address!.toString()) {
                        ui.write(`‚úÖ Admin set correctly!`);
                    } else {
                        ui.write(`‚ö†Ô∏è  Admin not set correctly, trying to fix...`);
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—â–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                        await mixton.sendInternal(provider.sender(), {
                            value: toNano('0.5'),
                            body: beginCell().endCell(),
                            bounce: false
                        });
                        
                        await new Promise(resolve => setTimeout(resolve, 10000));
                        
                        try {
                            const adminAfter = await mixton.getAdmin();
                            ui.write(`üë§ Admin address after fix: ${adminAfter.toString()}`);
                        } catch (adminError) {
                            ui.write(`‚ö†Ô∏è  Could not get admin address: ${adminError instanceof Error ? adminError.message : String(adminError)}`);
                        }
                    }
                } catch (adminError) {
                    ui.write(`‚ö†Ô∏è  Could not get admin address: ${adminError instanceof Error ? adminError.message : String(adminError)}`);
                }
            } else {
                ui.write(`‚ùå Alternative method also failed`);
            }
        } catch (altError) {
            ui.write(`‚ùå Alternative method failed: ${altError instanceof Error ? altError.message : String(altError)}`);
        }
    }
}