// src/components/ErrorBoundary.tsx
import { Component } from 'react';
import type { ErrorInfo, ReactNode } from 'react';
import {
  Box,
  Typography,
  Button,
  Card,
  CardContent,
  Alert,
  AlertTitle,
  Collapse,
  IconButton,
  Divider,
} from '@mui/material';
import { 
  Refresh as RefreshIcon, 
  BugReport as BugReportIcon,
  ExpandMore as ExpandMoreIcon,
  ExpandLess as ExpandLessIcon
} from '@mui/icons-material';

interface Props {
  children: ReactNode;
  theme?: any; // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π prop –¥–ª—è —Ç–µ–º—ã
}

interface State {
  hasError: boolean;
  error: Error | null;
  errorInfo: ErrorInfo | null;
  showDetails: boolean;
  errorStack: string;
  componentStack: string;
}

export class ErrorBoundary extends Component<Props, State> {
  public state: State = {
    hasError: false,
    error: null,
    errorInfo: null,
    showDetails: false,
    errorStack: '',
    componentStack: '',
  };

  public static getDerivedStateFromError(error: Error): State {
    return {
      hasError: true,
      error,
      errorInfo: null,
      showDetails: process.env.NODE_ENV === 'development',
      errorStack: error.stack || '',
      componentStack: '',
    };
  }

  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('üö® ErrorBoundary caught an error:', error);
    console.error('Error info:', errorInfo);
    
    this.setState({
      hasError: true,
      error,
      errorInfo,
      showDetails: process.env.NODE_ENV === 'development',
      errorStack: error.stack || '',
      componentStack: errorInfo.componentStack || '',
    });
  }

  private handleReset = () => {
    console.log('üîÑ Resetting error boundary');
    this.setState({
      hasError: false,
      error: null,
      errorInfo: null,
      showDetails: false,
      errorStack: '',
      componentStack: '',
    });
  };

  private handleReload = () => {
    console.log('üîÑ Reloading page');
    window.location.reload();
  };

  private toggleDetails = () => {
    this.setState(prevState => ({
      showDetails: !prevState.showDetails,
    }));
  };

  private copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    console.log('üìã Copied to clipboard');
  };

  render() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–º—É –∏–∑ props –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const theme = this.props.theme || {
      palette: {
        background: { default: '#121212', grey: { 900: '#121212', 800: '#1e1e1e' } },
        primary: { main: '#90caf9' },
        divider: 'rgba(255, 255, 255, 0.12)',
        text: { primary: '#fff', secondary: 'rgba(255, 255, 255, 0.7)' },
      }
    };
    
    if (this.state.hasError) {
      return (
        <Box
          sx={{
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            minHeight: '100vh',
            padding: 2,
            background: `linear-gradient(135deg, ${theme.palette.background.default} 0%, ${theme.palette.grey[900]} 100%)`,
          }}
        >
          <Card
            sx={{
              maxWidth: 800,
              width: '100%',
              p: 4,
              borderRadius: 3,
              background: `linear-gradient(145deg, ${theme.palette.grey[900]} 0%, ${theme.palette.grey[800]} 100%)`,
              border: `1px solid ${theme.palette.divider}`,
              boxShadow: `0 0 30px ${theme.palette.primary.main}60`,
            }}
          >
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
                <BugReportIcon color="error" sx={{ fontSize: 32, mr: 2 }} />
                <Typography variant="h4" component="h1" color="error">
                  –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
                </Typography>
              </Box>
              
              <Alert severity="error" sx={{ mb: 3 }}>
                <AlertTitle>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</AlertTitle>
                –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–æ–ª–∫–Ω—É–ª–æ—Å—å —Å –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
              </Alert>
              
              <Box sx={{ mb: 3 }}>
                <Typography variant="h6" gutterBottom sx={{ color: 'error.main' }}>
                  –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:
                </Typography>
                <Typography 
                  variant="body1" 
                  sx={{ 
                    fontFamily: 'monospace',
                    p: 2,
                    bgcolor: 'rgba(0, 0, 0, 0.2)',
                    borderRadius: 1,
                    overflow: 'auto',
                    maxHeight: '100px'
                  }}
                >
                  {this.state.error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}
                </Typography>
              </Box>
              
              <Box sx={{ mb: 3 }}>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                  <Typography variant="h6" color="text.primary" sx={{ flexGrow: 1 }}>
                    –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏
                  </Typography>
                  <IconButton onClick={this.toggleDetails} size="small">
                    {this.state.showDetails ? <ExpandLessIcon /> : <ExpandMoreIcon />}
                  </IconButton>
                </Box>
                
                <Collapse in={this.state.showDetails}>
                  <Box sx={{ mt: 2 }}>
                    <Typography variant="body2" color="text.secondary" gutterBottom>
                      <strong>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç:</strong> {this.state.componentStack.split('\n')[0] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç'}
                    </Typography>
                    
                    <Divider sx={{ my: 2 }} />
                    
                    <Box sx={{ mb: 2 }}>
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                        <Typography variant="body2" color="text.secondary">
                          <strong>–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:</strong>
                        </Typography>
                        <Button 
                          size="small" 
                          onClick={() => this.copyToClipboard(this.state.componentStack)}
                        >
                          –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                        </Button>
                      </Box>
                      <pre style={{ 
                        marginTop: '0.5rem',
                        padding: '1rem',
                        background: 'rgba(0, 0, 0, 0.1)',
                        borderRadius: '4px',
                        overflow: 'auto',
                        fontSize: '0.8rem',
                        lineHeight: '1.4',
                        maxHeight: '200px'
                      }}>
                        {this.state.componentStack}
                      </pre>
                    </Box>
                    
                    {this.state.errorStack && (
                      <Box>
                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                          <Typography variant="body2" color="text.secondary">
                            <strong>–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:</strong>
                          </Typography>
                          <Button 
                            size="small" 
                            onClick={() => this.copyToClipboard(this.state.errorStack)}
                          >
                            –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                          </Button>
                        </Box>
                        <pre style={{ 
                          marginTop: '0.5rem',
                          padding: '1rem',
                          background: 'rgba(0, 0, 0, 0.1)',
                          borderRadius: '4px',
                          overflow: 'auto',
                          fontSize: '0.8rem',
                          lineHeight: '1.4',
                          maxHeight: '200px'
                        }}>
                          {this.state.errorStack}
                        </pre>
                      </Box>
                    )}
                  </Box>
                </Collapse>
              </Box>
              
              <Box sx={{ display: 'flex', gap: 2, mt: 4 }}>
                <Button
                  variant="contained"
                  color="primary"
                  onClick={this.handleReset}
                  startIcon={<RefreshIcon />}
                  fullWidth
                >
                  –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </Button>
                <Button
                  variant="outlined"
                  onClick={this.handleReload}
                  fullWidth
                >
                  –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                </Button>
              </Box>
              
              {process.env.NODE_ENV === 'development' && (
                <Alert severity="info" sx={{ mt: 3 }}>
                  <AlertTitle>–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏</AlertTitle>
                  –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –≠—Ç–∞ –æ—à–∏–±–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–∞ —Å –ø—Ä–æ–±–ª–µ–º–æ–π –≤ –∫–æ–¥–µ. 
                  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
                </Alert>
              )}
            </CardContent>
          </Card>
        </Box>
      );
    }

    return this.props.children;
  }
}